              	      	//  Test Case 0
              	      	//  Do not distribute
              	      	//  Silly test with a simple loop decrementing and adding two harcoded values
              	      	//  Three memory operations at the end


0x0000: EB 00      	//     	JMP loc1			

0x0002:            	//      loc1:
0x0002: BA 00 0A 00	// 	movl $0xa00, %EDX	// EDX = 0x00000A00 Last virtual page
0x0006: 00         	//
0x0007: 8E DA      	//     	movw %DX, %DS		// DS = 0x0A00   DS_base = 0x0A000000

0x0009: B9 05 00 00	// 	MOV $0000000005,%ECX	// Loop iterations
0x000d: 00         	//
0x000e: B8 9A 00 00	// 	MOV $0x0000009A,%EAX	// Value decremented
0x0012: 00         	//
0x0013: BB 00 00 00	// 	MOV $0000000000,%EBX	// Iterations counter
0x0017: 00         	//
0x0018:            	//      loop:
0x0018: 04 FF   	//   	ADD $-0x1, %AL          // EAX = 0x99, 0x98, 0x97, 0x96, 0x95
0x001a: 83 C3 01    	//      ADD $0x1,  %EBX         // EBX = 0x01, 0x02, 0x03, 0x04, 0x05
0x001d: 83 C1 FF   	//   	ADD $-0x1, %ECX         // ECX = 0x04, 0x03, 0x02, 0x01, 0x00
0x0020: 75 F6      	//     	JNE loop                // taken 4 times, not taken when ECX==0 (thus ZF=1)

0x0022: 00 D8      	//     	ADD %BL, %AL		// AL = 0x9A, AF = 0, CF = 0
0x0024: 27         	//      DAA			// AL = 0, CF = 1, AF = 1

0x0025: 89 02      	//     	MOV %eax,0x00(%EDX)	// Write final values to memory   DS_base = 0x0A000000 
0x0027: 89 4A 04   	//   	MOV %ecx,0x04(%EDX)	// EDX =0x00000A00, VA=0x0A000A00/4/8, PA=0x5A00/4/8
0x002a: 89 5A 08   	//   	MOV %ebx,0x08(%EDX)	// EAX and ECX are 0, EBX is 5

0x002d: BA 00 0B 00	// 	movl $0xb00, %EDX	// EDX = 0x00000B00 physical frame at 0x4000
0x0031: 00         	//
0x0032: 8E DA      	//     	movw %DX, %DS		// DS = 0x0B00   DS_base = 0x0B000000

0x0034: BA 08 00 00	// 	movl $0x08, %EDX	// EDX = 0x00000008, VA=0x0B000008 PA=0x4008
0x0038: 00         	//
0x0039: BB 05 00 00	// 	movl $0x05, %EBX
0x003d: 00         	//

0x003e: B8 78 56 34	// 	mov  $0x12345678, %EAX   // EAX = 0x12345678
0x0042: 12         	//
0x0043: 25 F0 F0 F0	// 	and  $0xF0F0F0F0, %EAX   // EAX = 0x10305070
0x0047: F0         	//
0x0048: 21 05 04 00	// 	and  %EAX, 0x04          // Mem [VA = 0x0B000004, PA = 0x4004] = 0x00004040
0x004c: 00 00      	//
0x004e: 8B 1D 04 00	// 	mov  0x04, %EBX          // EBX = 0x00004040
0x0052: 00 00      	//

0x0054: F4         	//      HLT


0x0055: 00 00 00 00	// 
0x0059: 00 00 00 00	// 

0x4000: C3 C3 C3 C3	// 	.LONG 0xC3C3C3C3
0x4004: C3 C3 C3 C3	// 	.LONG 0xC3C3C3C3
0x4008: C3 C3 C3 C3	// 	.LONG 0xC3C3C3C3
0x400c: C3 C3 C3 C3	// 	.LONG 0xC3C3C3C3
0x4010: C3 C3 C3 C3	// 	.LONG 0xC3C3C3C3
0x4014: C3 C3 C3 C3	// 	.LONG 0xC3C3C3C3
0x4018: C3 C3 C3 C3	// 	.LONG 0xC3C3C3C3
0x401c: C3 C3 C3 C3	// 	.LONG 0xC3C3C3C3
0x4020: C3 C3 C3 C3	// 	.LONG 0xC3C3C3C3
0x4024: C3 C3 C3 C3	// 	.LONG 0xC3C3C3C3
