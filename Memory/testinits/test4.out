              	      	//  Test Case 4
              	      	//  Do not distribute
              	      	//  This test tries to recover from a TLB MISS
              	      	//  Change ES limit to 20'h00D0A



0x0000: EB 00      	//     	JMP loc1			

0x0002: BC 00 04 00	// 	loc1:mov $0x0400,%ESP      //setup SS and ESP
0x0006: 00         	//
0x0007: 8E D4      	//     	mov     %SP,%SS
0x0009: BC 00 08 00	// 	mov     $0x0800,%ESP
0x000d: 00         	//
0x000e: BA 00 0A 00	// 	movl    $0xa00, %EDX			// EDX = 0x00000A00 Last virtual page
0x0012: 00         	//
0x0013: 8E DA      	//     	movw    %DX, %DS           // DS = 0x0A00   DS_base = 0x0A000000
0x0015: BA 00 0D 00	// 	movl    $0xd00, %EDX			// EDX = 0x00000D00 Last virtual page
0x0019: 00         	//
0x001a: 8E C2      	//     	movw    %DX, %ES           // ES = 0x0D00   ES_base = 0x0D000000\

0x001c: B8 01 00 00	// 	MOV $0x00000001,%EAX      // EAX = 1 
0x0020: 00         	//
0x0021: BB 02 00 00	// 	MOV $0000000002,%EBX      // EBX = 2 
0x0025: 00         	//
0x0026: B9 03 00 00	// 	MOV $0000000003,%ECX      // ECX = 3 
0x002a: 00         	//

0x002b: 89 02      	//     	MOV %eax,0x00(%EDX)       // M[VA=DS:EDX=0x0A000D00, PA=0x5D00] = EAX = 0x00000001
0x002d: 89 4A 04   	//   	MOV %ecx,0x04(%EDX)       // M[VA=DS:EDX+4=0x0A000D04, PA=0x5D04] = ECX = 0x00000003
0x0030: 89 5A 08   	//   	MOV %ebx,0x08(%EDX)       // M[VA=DS:EDX+8=0x0A000D08, PA=0x5D08] = EBX = 0x00000002

0x0033: 83 C0 01   	//   	ADD $0x01, %EAX			  // EAX=0x00000002
0x0036: 83 C0 01   	//   	ADD $0x01, %EAX			  // EAX=0x00000003
0x0039: 83 C0 01   	//   	ADD $0x01, %EAX			  // EAX=0x00000004
0x003c: 83 C3 02   	//   	ADD $0x02, %EBX			  // EBX=0x00000004
0x003f: 83 C3 02   	//   	ADD $0x02, %EBX			  // EBX=0x00000006
0x0042: 83 C3 02   	//   	ADD $0x02, %EBX			  // EBX=0x00000008
0x0045: 83 C1 03   	//   	ADD $0x03, %ECX			  // ECX=0x00000006
0x0048: 83 C1 03   	//   	ADD $0x03, %ECX			  // ECX=0x00000009

              	      	// Write to ES
0x004b: 26 89 02   	//   	MOV %EAX,%ES:(%EDX)       // accessing M[VA=ES:EDX=0x0D000D00],
              		                        	//  with initial ES limit (20'h003FF), this will result in segment violation
              		                        	//  change ES limit to 20'h00D0A to test TLB misses
              		                        	//  after recovering from TLB miss (handler will skip ES override), then
              		                        	//  M[VA=DS:EDX=0x0A000D00, PA=0x5D00] = EAX = 0x0000004c
0x004e: 26 89 4A 04	// 	MOV %ECX,%ES:0x04(%EDX)   // accessing M[VA=ES:EDX+4=0x0D000D04]
              		                        	//  with initial ES limit (20'h003FF), this will result in segment violation
              		                        	//  change ES limit to 20'h00D0A to test TLB misses
              		                        	//  after recovering from TLB miss (handler will skip ES override), then
              		                        	//  M[VA=DS:EDX+4=0x0A000D04, PA=0x5D04] = ECX = 0x00000009
0x0052: 26 89 5A 08	// 	MOV %EBX,%ES:0x08(%EDX)   // accessing M[VA=ES:EDX+8=0x0D000D08]
              		                        	//  should be a ES segment violation, even with ES limit set to 20'h00D0A
              		                        	//  after recovering from ES segment violation (handler will skip ES override), th
              		                        	//  M[VA=DS:EDX+8=0x0A000D08, PA=0x5D08] = EBX = 0x00000008
0x0056: 83 C0 01   	//   	ADD $0x01, %EAX           // EAX=0x00000054
0x0059: 83 C3 01   	//   	ADD $0x01, %EBX           // EBX=0x00000009
0x005c: 83 C3 01   	//   	ADD $0x01, %EBX           // EBX=0x0000000A
0x005f: 89 02      	//     	MOV %EAX,0x00(%EDX)       // M[VA=DS:EDX=0x0A000D00, PA=0x5D00] = EAX = 0x00000054
0x0061: 89 4A 04   	//   	MOV %ECX,0x04(%EDX)       // M[VA=DS:EDX+4=0x0A000D04, PA=0x5D04] = ECX = 0x00000009
0x0064: 89 5A 08   	//   	MOV %EBX,0x08(%EDX)       // M[VA=DS:EDX+8=0x0A000D08, PA=0x5D08] = EBX = 0x0000000A
0x0067: B8 69 00 00	// 	MOV $0x69, %EAX           // EAX=0x00000069
0x006b: 00         	//
              		                        	//  End of test 
0x006c: F4         	//       	HLT							  // Write-non-allocate should perform badly


0x006d: 00 00 00 00	// 	.org 0x0800  //Segment limit handler
0x0071: 00 00 00 00	// 
0x0075: 00 00 00 00	// 
0x0079: 00 00 00 00	// 
0x007d: 00 00 00 00	// 

0x0800: 58         	//       	POP %EAX  				// Pop EIP
0x0801: 83 C0 01   	//   	ADD $0x01,%EAX			// Skip the segment override by adding 0x01
0x0804: 89 42 10   	//   	MOV %EAX, 0x10(%EDX)            // M[VA=DS:EDX+0x10=0x0A000D10, PA=0x5D10] = EAX = new EIP
0x0807: 50         	//       	PUSH %EAX				// Push the new EIP
0x0808: CF         	//       	IRET

0x0809: 00 00 00 00	// 	.org 0x0900  //Page fault handler
0x080d: 00 00 00 00	// 
0x0811: 00 00 00 00	// 
0x0815: 00 00 00 00	// 
0x0819: 00 00 00 00	// 

0x0900: 58         	//       	POP %EAX  				// Pop EIP
0x0901: 83 C0 01   	//   	ADD $0x01,%EAX			// Skip the segment override by adding 0x01
0x0904: 89 42 0C   	//   	MOV %EAX, 0x0C(%EDX)	        // M[VA=DS:EDX+0xC=0x0A000D0C, PA=0x5D0C] = EAX = new EIP
0x0907: 50         	//       	PUSH %EAX				// Push the new EIP
0x0908: CF         	//       	IRET

0x0909: 00 00 00 00	// 	.org 0x2068 // IDT Entries
0x090d: 00 00 00 00	// 
0x0911: 00 00 00 00	// 
0x0915: 00 00 00 00	// 
0x0919: 00 00 00 00	// 
0x2068: 00 08 00 00	// 	.long 0x00000800 
0x206c: 00 00 00 00	// 	.long 0x00000000 // CS=0x0000, EIP=0x00000800 (segment limit routine address)
0x2070: 00 09 00 00	// 	.long 0x00000900 
0x2074: 00 00 00 00	// 	.long 0x00000000 // CS=0x0000, EIP=0x00000900 (page fault routine address)

